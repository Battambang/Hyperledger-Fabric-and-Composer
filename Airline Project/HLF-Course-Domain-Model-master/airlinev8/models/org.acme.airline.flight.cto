namespace org.acme.airline.flight

import org.acme.airline.aircraft.Aircraft

asset Flight identified by flightId {
  // Solution to the exercise - try out the Regular expression at http://regex101.com
  // Share your optimized regular expression with others :) 
  o   String            flightId regex=/[A-Z][A-Z][0-9][0-9][0-9]-[0-9][0-9]-[0-3][0-9]-[0-9][0-9]/
  o   String            flightNumber
  o   Route             route
  o   String[]          aliasFlightNumber  optional
  --> Aircraft          aircraft  optional
}

concept Route {
  o   String    origin       regex=/[A-Z][A-Z][A-Z]/
  o   String    destination  regex=/[A-Z][A-Z][A-Z]/
  o   DateTime  schedule  
}

// Logistics department of ACME creates the flights
transaction CreateFlight {
  o   String      flightNumber
  o   String      origin
  o   String      destination
  o   DateTime    schedule
}

event FlightCreated {
  o   String      flightId
}

// Assigns an aircraft to the flight
// The logistics / validation on availability of aircraft
// Kept outside of the Blockchain
transaction AssignAircraft {
  o   String    flightId
  o   String    aircraftId
}

// Event indicating that aircraft was assigned
event AircraftAssigned {
  o   String    flightId
  o   String    aircraftId
}








/**
 * Emitted every time a new flight is scheduled/created
 * Subscriber will receive the flight code that they can use
 * to access the Flight resource on the network
 */
// event FlightCreated {
//   o   String    flightId
// }


/** Data for testing **

> composer archive create -a dist/airlinev6.bna --sourceType dir --sourceName .

{
  "$class": "org.acme.airline.flight.Flight",
  "flightNumber": "AE101-05-26-18",
  "route": {
    "$class": "org.acme.airline.flight.Route",
    "origin": "EWR",
    "destination": "SEA",
    "schedule": "2017-10-15T21:44:38.666Z"
  },
  "aliasFlightNumber": ["BU456"]
}
****/

/*

transaction CreateFlight {
  o   String      flightNumber
  o   String      origin
  o   String      destination
  o   DateTime    schedule
}
*/